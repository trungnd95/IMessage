datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  image         String?
  conversations ConversationParticipant[]
  messages      Message[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  participants    ConversationParticipant[]
  messages        Message[]
  lastedMessageId String    @unique @db.ObjectId
  lastestMessage  Message?  @relation(name: "lastestMessage", fields: [lastedMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createddAt      DateTime  @default(now())
  updateddAt      DateTime  @updatedAt
}

model ConversationParticipant {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  participantId             String         @db.ObjectId
  participant               User           @relation(fields: [participantId], references: [id])
  conversationId            String         @db.ObjectId
  conversation              Conversation   @relation(fields: [conversationId], references: [id])
  hasUnseenLastestMessage   Boolean
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  conversationId    String        @db.ObjectId
  conversation      Conversation  @relation(fields: [conversationId], references: [id])
  isLastestIn       Conversation? @relation("lastestMessage")
  senderId          String        @db.ObjectId
  sender            User          @relation(fields: [senderId], references: [id])
  createddAt        DateTime      @default(now())
  updateddAt        DateTime      @updatedAt
}